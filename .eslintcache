[{"D:\\mypro\\whatsappclone\\src\\index.js":"1","D:\\mypro\\whatsappclone\\src\\reportWebVitals.js":"2","D:\\mypro\\whatsappclone\\src\\App.js":"3","D:\\mypro\\whatsappclone\\src\\Components\\TopLeftBar\\TopLeftBar.js":"4","D:\\mypro\\whatsappclone\\src\\Components\\Searchchat\\Searchchat.js":"5","D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chatlist.js":"6","D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chat.js":"7","D:\\mypro\\whatsappclone\\src\\Components\\TopRightBar\\TopRightBar.js":"8","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\GroupMessages.js":"9","D:\\mypro\\whatsappclone\\src\\Firebase.js":"10","D:\\mypro\\whatsappclone\\src\\Components\\Menu\\Menu.js":"11","D:\\mypro\\whatsappclone\\src\\Components\\NewGroupSlider\\NewGroupSlider.js":"12","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Registration\\Registration.js":"13","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Authentication.js":"14","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Login\\Login.js":"15","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\SendMessage\\SendMessage.js":"16"},{"size":517,"mtime":1607181113210,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1607181113210,"results":"19","hashOfConfig":"18"},{"size":2693,"mtime":1607332902526,"results":"20","hashOfConfig":"18"},{"size":2773,"mtime":1607333401528,"results":"21","hashOfConfig":"18"},{"size":579,"mtime":1607305621550,"results":"22","hashOfConfig":"18"},{"size":1622,"mtime":1607306867899,"results":"23","hashOfConfig":"18"},{"size":4142,"mtime":1607305621424,"results":"24","hashOfConfig":"18"},{"size":2967,"mtime":1607329133329,"results":"25","hashOfConfig":"18"},{"size":8038,"mtime":1607343014373,"results":"26","hashOfConfig":"18"},{"size":507,"mtime":1607240560773,"results":"27","hashOfConfig":"18"},{"size":480,"mtime":1607305190571,"results":"28","hashOfConfig":"18"},{"size":326,"mtime":1607305238086,"results":"29","hashOfConfig":"18"},{"size":1339,"mtime":1607278329253,"results":"30","hashOfConfig":"18"},{"size":3445,"mtime":1607305397195,"results":"31","hashOfConfig":"18"},{"size":830,"mtime":1607278116254,"results":"32","hashOfConfig":"18"},{"size":1266,"mtime":1607309216255,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"wmxsal",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\mypro\\whatsappclone\\src\\index.js",[],["70","71"],"D:\\mypro\\whatsappclone\\src\\reportWebVitals.js",[],"D:\\mypro\\whatsappclone\\src\\App.js",["72"],"D:\\mypro\\whatsappclone\\src\\Components\\TopLeftBar\\TopLeftBar.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Searchchat\\Searchchat.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chatlist.js",["73"],"D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chat.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\TopRightBar\\TopRightBar.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\GroupMessages.js",["74","75","76","77"],"import React, { useEffect, useState } from 'react';\r\nimport './GroupMessages.css';\r\nimport firebase from '../../Firebase';\r\nimport SendMessage from './SendMessage/SendMessage';\r\n\r\nconst GroupMessages = (props) => {\r\n\r\n    const [senderChats, setsenderChats] = useState([]);\r\n    const [receiversChats, setreceiversChats] = useState([]);\r\n    const [newMessage,setNewMessage] = useState(false);\r\n\r\n    const query = firebase.firestore().collection('users').doc(props.user.uid).collection('To');\r\n\r\n    useEffect(() => {\r\n        const observer = query.onSnapshot(querySnapshot => {\r\n            console.log(querySnapshot);\r\n            console.log(`Received query snapshot of size ${querySnapshot.size}`);\r\n            let myDataArray = []\r\n            querySnapshot.forEach(doc =>\r\n                myDataArray.push({ ...doc.data() })\r\n            );\r\n            console.log(myDataArray);\r\n            setNewMessage(!newMessage);\r\n        }, err => {\r\n            console.log(`Encountered error: ${err}`);\r\n        });\r\n        return ()=>observer();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('[GroupMessages.js] useEffect hook');\r\n\r\n        const senderSnapshot = firebase.firestore().collection('users').doc(props.user.uid).collection('To').doc(props.openedChat.id).get();\r\n        senderSnapshot.then((snap) => {\r\n            let chats = snap.data();\r\n            if (chats) {\r\n                console.log(chats);\r\n                setsenderChats(chats.messages);\r\n            } else {\r\n                setsenderChats([]);\r\n            }\r\n        }).catch((e) => {\r\n            console.log(e.message);\r\n            setsenderChats([]);\r\n        });\r\n\r\n        const receiversSnapshot = firebase.firestore().collection('users').doc(props.openedChat.id).collection('To').doc(props.user.uid).get();\r\n        receiversSnapshot.then((snap) => {\r\n            let chats = snap.data();\r\n            if (chats) {\r\n                console.log(chats);\r\n                setreceiversChats(chats.messages);\r\n            } else {\r\n                setreceiversChats([]);\r\n            }\r\n        }).catch((e) => {\r\n            console.log(e.message);\r\n            setreceiversChats([]);\r\n        });\r\n    }, [props.openedChat,newMessage]);\r\n\r\n    const db = firebase.firestore();\r\n\r\n    const updateReceiverChats = (updatedReceiversChats) => {\r\n\r\n        const postMsg = db.collection('users').doc(props.openedChat.id).collection('To').doc(props.user.uid).set({ messages: updatedReceiversChats });\r\n        return postMsg;\r\n        postMsg.then(data => {\r\n            setreceiversChats(updatedReceiversChats);\r\n        }).catch(e => {\r\n            console.log(e.message);\r\n        });\r\n    }\r\n    const updateSendersChats = (updatedSendersChats) => {\r\n        const sendMsg = db.collection('users').doc(props.user.uid).collection('To').doc(props.openedChat.id).set({ messages: updatedSendersChats });\r\n        return sendMsg;\r\n\r\n        sendMsg.then(data => {\r\n            setsenderChats(updatedSendersChats);\r\n        }).catch(e => {\r\n            console.log(e.message);\r\n        });\r\n    }\r\n\r\n    const sendMessage = (message) => {\r\n        if (message) {\r\n\r\n            let updatedSendersChats = [...senderChats, {\r\n                message: message,\r\n                dateTime: (new Date()).toISOString(),\r\n                sent: true,\r\n                received: false,\r\n                isSender: true\r\n            }];\r\n\r\n            let updatedReceiversChats = [...receiversChats, {\r\n                message: message,\r\n                dateTime: (new Date()).toISOString(),\r\n                sent: false,\r\n                received: true,\r\n                isSender: false\r\n            }];\r\n\r\n\r\n            updateSendersChats(updatedSendersChats).then(data => {\r\n                setsenderChats(updatedSendersChats);\r\n                return true;\r\n            }).then(senderSucess => {\r\n                if (senderSucess) {\r\n                    updateReceiverChats(updatedReceiversChats);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }).then(receiverSucess => {\r\n                if (receiverSucess) {\r\n                    setreceiversChats(updatedReceiversChats);\r\n                }\r\n            }).catch(e => {\r\n                console.log(e.message);\r\n            });\r\n\r\n            // let senderData = {\r\n            //     message: message,\r\n            //     dateTime: (new Date()).toISOString(),\r\n            //     sent: true,\r\n            //     received: false,\r\n            //     isSender: true\r\n            // }\r\n            // let receiverData = {\r\n            //     message: message,\r\n            //     dateTime: (new Date()).toISOString(),\r\n            //     sent: false,\r\n            //     received: true,\r\n            //     isSender: false\r\n            // }\r\n            // console.log(props.user);\r\n            // console.log(props.openedChat);\r\n            // console.log(senderData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return <div className='GroupMessages-container'>\r\n        {/* <>\r\n            <div className='Group-message incoming'>\r\n                created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n            </div>\r\n            <div className='Group-message outgoing'>\r\n                c\r\n            <div className='Group-message-time'>5.00PM</div>\r\n            </div>\r\n        </> */}\r\n        {\r\n\r\n            senderChats.map(chat => {\r\n                if (chat.isSender === true) {\r\n                    return <div key={chat.dateTime} className='Group-message outgoing'>\r\n                        {chat.message}\r\n                        <div className='Group-message-time'>{new Date(chat.dateTime).toLocaleString('en-US', { hour: 'numeric',minute: 'numeric', hour12: true })}</div>\r\n                    </div>\r\n                } else {\r\n                    return <div key={chat.dateTime} className='Group-message incoming'>\r\n                        {chat.message}\r\n                        <div className='Group-message-time'>{new Date(chat.dateTime).toLocaleString('en-US', { hour: 'numeric',minute: 'numeric', hour12: true })}</div>\r\n                    </div>\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        {/* <div className='Group-info-message'>created by 5454545</div>\r\n        <div className='Group-info-message'>created by 5454545</div>\r\n        <div className='Group-info-message'>created by 5454545</div>\r\n        <div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div>\r\n        <div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div><div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div><div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div>\r\n        <div className='Group-message outgoing'>\r\n            c\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div> */}\r\n\r\n        <SendMessage sendMessage={sendMessage} user={props.user} openedChat={props.openedChat} />\r\n    </div >\r\n}\r\nexport default GroupMessages;","D:\\mypro\\whatsappclone\\src\\Firebase.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Menu\\Menu.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\NewGroupSlider\\NewGroupSlider.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Registration\\Registration.js",["78"],"import React, { useState } from 'react';\r\nimport './Registration.css';\r\n\r\nexport const Registration = (props) => {\r\n    return <div className='Registration-container'>\r\n        <div className='Registration-card'>\r\n            <div className='input-field-placeholder'>\r\n                <input onChange={(e) => props.fieldOnchaneHandler(e)} name='name' className='input-field' type='text' placeholder='Enter name'></input>\r\n            </div>\r\n            <div className='input-field-placeholder'>\r\n                <input onChange={(e) => props.fieldOnchaneHandler(e)} name='email' className='input-field' type='email' placeholder='Enter email'></input>\r\n            </div>\r\n            <div className='input-field-placeholder'>\r\n                <input onChange={(e) => props.fieldOnchaneHandler(e)} name='password' className='input-field' type='password' placeholder='Enter password'></input>\r\n            </div>\r\n            <div className='input-field-placeholder'>\r\n                <input onChange={(e) => props.fieldOnchaneHandler(e)} name='cnfPassword' className='input-field' type='password' placeholder='ReEnter password'></input>\r\n            </div>\r\n            <div className='input-field-placeholder'>\r\n                <button onClick={props.registerHandler}>Register</button>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Authentication.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Login\\Login.js",["79"],"import React, { useState } from 'react';\r\nimport './Login.css';\r\n\r\nexport const Login = (props) => {\r\n    return <div className=\"Login-container\">\r\n        <div className='Login-card'>\r\n            <div className='input-field-placeholder'>\r\n                <input onChange={(e) => props.fieldOnchaneHandler(e)} name='email' className='input-field' type='email' placeholder='Enter email'></input>\r\n            </div>\r\n            <div className='input-field-placeholder'>\r\n                <input onChange={(e) => props.fieldOnchaneHandler(e)} name='password' className='input-field' type='password' placeholder='Enter password'></input>\r\n            </div>\r\n            <div className='input-field-placeholder'>\r\n                <button onClick={props.loginHandler}>Login</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\SendMessage\\SendMessage.js",["80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":37,"column":23,"nodeType":"91","messageId":"92","endLine":37,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":28,"column":8,"nodeType":"95","endLine":28,"endColumn":10,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":61,"column":8,"nodeType":"95","endLine":61,"endColumn":37,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":69,"column":9,"nodeType":"101","messageId":"102","endLine":73,"endColumn":12},{"ruleId":"99","severity":1,"message":"100","line":79,"column":9,"nodeType":"101","messageId":"102","endLine":83,"endColumn":12},{"ruleId":"85","severity":1,"message":"103","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"103","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"104","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":16},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'SendMessage' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newMessage' and 'query'. Either include them or remove the dependency array. You can also do a functional update 'setNewMessage(n => ...)' if you only need 'newMessage' in the 'setNewMessage' call.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'props.user.uid'. Either include it or remove the dependency array.",["108"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'useState' is defined but never used.","'firebase' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [newMessage, query]",{"range":"113","text":"114"},"Update the dependencies array to be: [props.openedChat, newMessage, props.user.uid]",{"range":"115","text":"116"},[1059,1061],"[newMessage, query]",[2211,2240],"[props.openedChat, newMessage, props.user.uid]"]