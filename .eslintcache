[{"D:\\mypro\\whatsappclone\\src\\index.js":"1","D:\\mypro\\whatsappclone\\src\\reportWebVitals.js":"2","D:\\mypro\\whatsappclone\\src\\App.js":"3","D:\\mypro\\whatsappclone\\src\\Components\\TopLeftBar\\TopLeftBar.js":"4","D:\\mypro\\whatsappclone\\src\\Components\\Searchchat\\Searchchat.js":"5","D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chatlist.js":"6","D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chat.js":"7","D:\\mypro\\whatsappclone\\src\\Components\\TopRightBar\\TopRightBar.js":"8","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\GroupMessages.js":"9","D:\\mypro\\whatsappclone\\src\\Firebase.js":"10","D:\\mypro\\whatsappclone\\src\\Components\\Menu\\Menu.js":"11","D:\\mypro\\whatsappclone\\src\\Components\\NewGroupSlider\\NewGroupSlider.js":"12","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Registration\\Registration.js":"13","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Authentication.js":"14","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Login\\Login.js":"15","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\SendMessage\\SendMessage.js":"16","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\VideoMessage\\VideoMessage.js":"17","D:\\mypro\\whatsappclone\\src\\Components\\Loader\\Loader.js":"18"},{"size":517,"mtime":1607181113210,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1607181113210,"results":"21","hashOfConfig":"20"},{"size":2855,"mtime":1607867322055,"results":"22","hashOfConfig":"20"},{"size":2773,"mtime":1607333401528,"results":"23","hashOfConfig":"20"},{"size":579,"mtime":1607305621550,"results":"24","hashOfConfig":"20"},{"size":1501,"mtime":1607867219374,"results":"25","hashOfConfig":"20"},{"size":4142,"mtime":1607305621424,"results":"26","hashOfConfig":"20"},{"size":2926,"mtime":1607864145545,"results":"27","hashOfConfig":"20"},{"size":10896,"mtime":1607867935552,"results":"28","hashOfConfig":"20"},{"size":507,"mtime":1607240560773,"results":"29","hashOfConfig":"20"},{"size":480,"mtime":1607305190571,"results":"30","hashOfConfig":"20"},{"size":326,"mtime":1607305238086,"results":"31","hashOfConfig":"20"},{"size":1325,"mtime":1607863380157,"results":"32","hashOfConfig":"20"},{"size":3445,"mtime":1607305397195,"results":"33","hashOfConfig":"20"},{"size":816,"mtime":1607863361829,"results":"34","hashOfConfig":"20"},{"size":1938,"mtime":1607863738933,"results":"35","hashOfConfig":"20"},{"size":5532,"mtime":1607864051541,"results":"36","hashOfConfig":"20"},{"size":266,"mtime":1607867292024,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"wmxsal",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\mypro\\whatsappclone\\src\\index.js",[],["76","77"],"D:\\mypro\\whatsappclone\\src\\reportWebVitals.js",[],"D:\\mypro\\whatsappclone\\src\\App.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\TopLeftBar\\TopLeftBar.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Searchchat\\Searchchat.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chatlist.js",["78"],"D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chat.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\TopRightBar\\TopRightBar.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\GroupMessages.js",["79"],"D:\\mypro\\whatsappclone\\src\\Firebase.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Menu\\Menu.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\NewGroupSlider\\NewGroupSlider.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Registration\\Registration.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Authentication.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Login\\Login.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\SendMessage\\SendMessage.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\VideoMessage\\VideoMessage.js",["80"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport RecordRTC from 'recordrtc';\r\nimport firebase from '../../../Firebase';\r\nimport { Spinner, SpinnerSize, ProgressIndicator } from 'office-ui-fabric-react';\r\nimport './VideoMessage.css';\r\n\r\nconst VideoMessage = (props) => {\r\n    const videoRef = useRef(null);\r\n    const [rtcStream, setRtcStream] = useState(null);\r\n    const [mediaStream, setMediaStream] = useState(null);\r\n    const [recordingStatus, setRecordingStatus] = useState('');\r\n    const [previewSrc, setPreviewSrc] = useState('');\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n    const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (props.recording) {\r\n            streamCamVideo();\r\n        } else {\r\n            stopVideo().then(sucess=>{\r\n                console.log('recording stoped');\r\n            });\r\n        }\r\n    }, [props.recording]);\r\n\r\n    const getFileBlob = (url, cb) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url);\r\n        xhr.responseType = \"blob\";\r\n        xhr.addEventListener('load', function () {\r\n            cb(xhr.response);\r\n        });\r\n        xhr.send();\r\n    };\r\n\r\n    const sendVideo = (media) => {\r\n        if (media) {\r\n            setShowSpinner(true);\r\n            let messageTime = (new Date()).toISOString();\r\n            let userStorageRef = firebase.storage().ref(props.user.uid + '/messages/' + messageTime);\r\n            getFileBlob(media, blob => {\r\n                let task = userStorageRef.put(blob);\r\n                task.on('state_changed',\r\n                    function progress(snapshot) {\r\n                        setUploadProgress(snapshot.bytesTransferred / snapshot.totalBytes);\r\n                    },\r\n                    function error(err) {\r\n                        console.log(err.message);\r\n                    },\r\n                    function complete() {\r\n                        setShowSpinner(null);\r\n                        firebase.storage().ref().child(props.user.uid + '/messages/' + messageTime).getDownloadURL().then(url=>{\r\n                            console.log(url);\r\n                            props.sendMessage('',url,false);\r\n                            setRecordingStatus('');\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    const stopVideo = () => {\r\n        let resolvePromise = new Promise((resolve,reject)=>{\r\n            if (rtcStream) {\r\n                rtcStream.stopRecording(() => {\r\n                    videoRef.current.src = videoRef.current.srcObject = null;\r\n                    videoRef.current.muted = false;\r\n                    videoRef.current.volume = 1;\r\n                    videoRef.current.src = URL.createObjectURL(rtcStream.getBlob()); //rtcStream.toURL();\r\n                    setPreviewSrc(URL.createObjectURL(rtcStream.getBlob()));\r\n                    rtcStream.destroy();\r\n                    setRtcStream(null);\r\n                    setRecordingStatus('previewing');\r\n                    resolve('recording stoped');\r\n                });\r\n            }else{\r\n                resolve('recording stoped');\r\n            }\r\n            if (mediaStream) {\r\n                const stream = mediaStream;\r\n                const tracks = stream.getTracks();\r\n                tracks.forEach(track => track.stop());\r\n            }\r\n        });\r\n        return resolvePromise;\r\n    }\r\n\r\n    const streamCamVideo = () => {\r\n        \r\n        setShowSpinner(false);\r\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;\r\n\r\n        let constraints = { audio: false, video: { width: 1280, height: 720 } };\r\n        navigator.mediaDevices\r\n            .getUserMedia(constraints)\r\n            .then(function (mediaStream) {\r\n                setMediaStream(mediaStream);\r\n\r\n                let localRtcStream = RecordRTC(mediaStream, { type: 'video' });\r\n                localRtcStream.startRecording();\r\n                setRtcStream(localRtcStream);\r\n\r\n                videoRef.current.srcObject = mediaStream;\r\n                videoRef.current.onloadedmetadata = function (e) {\r\n                    videoRef.current.play();\r\n                };\r\n                setRecordingStatus('recording');\r\n                props.showHiddenMessage();\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            }); // always check for errors at the end.\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='Group-message outgoing' hidden={recordingStatus !== '' ? false : true}>\r\n                <div className=\"Video-message-container\">\r\n                    {showSpinner === true ?\r\n                        <Spinner size={SpinnerSize.large} className='Video-message-spinner' /> : ''}\r\n                    <video muted={true} className='Video-message-camera' autoPlay={true} ref={videoRef} ></video>\r\n                </div>\r\n                <br />\r\n\r\n                {showSpinner === false ?\r\n                    <button onClick={() => { stopVideo().then(sucess=>{sendVideo(previewSrc)})} }>Send Message</button> : ''\r\n                }\r\n                {\r\n                    showSpinner ?\r\n                        <ProgressIndicator percentComplete={uploadProgress} /> : ''\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default VideoMessage;","D:\\mypro\\whatsappclone\\src\\Components\\Loader\\Loader.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":41,"column":24,"nodeType":"87","messageId":"88","endLine":41,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":43,"column":8,"nodeType":"91","endLine":43,"endColumn":29,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":24,"column":8,"nodeType":"91","endLine":24,"endColumn":25,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getSendersChats' and 'props.user.uid'. Either include them or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has missing dependencies: 'stopVideo' and 'streamCamVideo'. Either include them or remove the dependency array.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [getSendersChats, props.openedChat.id, props.user.uid]",{"range":"103","text":"104"},"Update the dependencies array to be: [props.recording, stopVideo, streamCamVideo]",{"range":"105","text":"106"},[1612,1633],"[getSendersChats, props.openedChat.id, props.user.uid]",[913,930],"[props.recording, stopVideo, streamCamVideo]"]