[{"D:\\mypro\\whatsappclone\\src\\index.js":"1","D:\\mypro\\whatsappclone\\src\\reportWebVitals.js":"2","D:\\mypro\\whatsappclone\\src\\App.js":"3","D:\\mypro\\whatsappclone\\src\\Components\\TopLeftBar\\TopLeftBar.js":"4","D:\\mypro\\whatsappclone\\src\\Components\\Searchchat\\Searchchat.js":"5","D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chatlist.js":"6","D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chat.js":"7","D:\\mypro\\whatsappclone\\src\\Components\\TopRightBar\\TopRightBar.js":"8","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\GroupMessages.js":"9","D:\\mypro\\whatsappclone\\src\\Firebase.js":"10","D:\\mypro\\whatsappclone\\src\\Components\\Menu\\Menu.js":"11","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Registration\\Registration.js":"12","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Authentication.js":"13","D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Login\\Login.js":"14","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\SendMessage\\SendMessage.js":"15","D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\VideoMessage\\VideoMessage.js":"16","D:\\mypro\\whatsappclone\\src\\Components\\Loader\\Loader.js":"17","D:\\mypro\\whatsappclone\\src\\Components\\LeftSlider\\LeftSlider.js":"18","D:\\mypro\\whatsappclone\\src\\Components\\UserDetails\\UserDetails.js":"19"},{"size":517,"mtime":1607181113210,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1607181113210,"results":"22","hashOfConfig":"21"},{"size":3722,"mtime":1607874519042,"results":"23","hashOfConfig":"21"},{"size":2865,"mtime":1607870865373,"results":"24","hashOfConfig":"21"},{"size":579,"mtime":1607305621550,"results":"25","hashOfConfig":"21"},{"size":1501,"mtime":1607867219374,"results":"26","hashOfConfig":"21"},{"size":4142,"mtime":1607305621424,"results":"27","hashOfConfig":"21"},{"size":2926,"mtime":1607864145545,"results":"28","hashOfConfig":"21"},{"size":10894,"mtime":1607868180423,"results":"29","hashOfConfig":"21"},{"size":507,"mtime":1607240560773,"results":"30","hashOfConfig":"21"},{"size":480,"mtime":1607305190571,"results":"31","hashOfConfig":"21"},{"size":1325,"mtime":1607863380157,"results":"32","hashOfConfig":"21"},{"size":3445,"mtime":1607305397195,"results":"33","hashOfConfig":"21"},{"size":816,"mtime":1607863361829,"results":"34","hashOfConfig":"21"},{"size":1938,"mtime":1607863738933,"results":"35","hashOfConfig":"21"},{"size":5532,"mtime":1607864051541,"results":"36","hashOfConfig":"21"},{"size":266,"mtime":1607867292024,"results":"37","hashOfConfig":"21"},{"size":301,"mtime":1607868547766,"results":"38","hashOfConfig":"21"},{"size":3217,"mtime":1607940064096,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"wmxsal",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\mypro\\whatsappclone\\src\\index.js",[],["81","82"],"D:\\mypro\\whatsappclone\\src\\reportWebVitals.js",[],"D:\\mypro\\whatsappclone\\src\\App.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\TopLeftBar\\TopLeftBar.js",["83"],"D:\\mypro\\whatsappclone\\src\\Components\\Searchchat\\Searchchat.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chatlist.js",["84"],"D:\\mypro\\whatsappclone\\src\\Components\\Chatlist\\Chat.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\TopRightBar\\TopRightBar.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\GroupMessages.js",["85"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport './GroupMessages.css';\r\nimport firebase from '../../Firebase';\r\nimport SendMessage from './SendMessage/SendMessage';\r\nimport VideoMessage from './VideoMessage/VideoMessage';\r\nimport Loader from '../Loader/Loader';\r\n\r\n\r\nconst GroupMessages = (props) => {\r\n    const [senderChats, setsenderChats] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n    const [showLoader,setShowLoader] = useState(false);\r\n    const [recordWebcam, setrecordWebcam] = useState(false);\r\n\r\n    const [requestedChat, setRequestedChat] = useState(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: \"auto\", block: \"end\" })\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('[GroupMessages.js] setting observer');\r\n        getSendersChats();\r\n        const query = firebase.firestore().collection('users').doc(props.user.uid).collection('To').doc(props.openedChat.id);\r\n        const observer = query.onSnapshot(querySnapshot => {\r\n            console.log(`Received query snapshot of size ${querySnapshot.size}`);\r\n            let chats = querySnapshot.data();\r\n            if (chats) {\r\n                console.log(chats);\r\n                setsenderChats(chats.messages);\r\n                scrollToBottom();\r\n            } else {\r\n                setsenderChats([]);\r\n            }\r\n        }, err => {\r\n            console.log(`Encountered error: ${err}`);\r\n        });\r\n        return () => {\r\n            console.log('[GroupMessages.js] cleaning observer');\r\n            observer();\r\n        }\r\n    }, [props.openedChat.id]);\r\n\r\n    const getSendersChats = () => {\r\n        setShowLoader(true);\r\n        const senderSnapshot = firebase.firestore().collection('users').doc(props.user.uid).collection('To').doc(props.openedChat.id).get();\r\n        senderSnapshot.then((snap) => {\r\n            let chats = snap.data();\r\n            if (chats) {\r\n                console.log(chats);\r\n                setsenderChats(chats.messages);\r\n                scrollToBottom();\r\n            } else {\r\n                setsenderChats([]);\r\n            }\r\n            setShowLoader(false);\r\n        }).catch((e) => {\r\n            console.log(e.message);\r\n            setsenderChats([]);\r\n            setShowLoader(false);\r\n        });\r\n    }\r\n\r\n    const showHiddenMessage = () => {\r\n        let updatedChats = [...senderChats];\r\n        updatedChats.forEach((chat, index) => {\r\n            if (chat.isSender !== true) {\r\n                if (requestedChat.dateTime === chat.dateTime) {\r\n                    let newChat = { ...chat };\r\n                    newChat.reactionRequest = true;\r\n                    newChat.reactionReceived = true;\r\n                    updatedChats[index] = newChat;\r\n                    setsenderChats(updatedChats);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const recordReaction = (requestedChat) => {\r\n\r\n        setrecordWebcam(!recordWebcam);\r\n\r\n        setRequestedChat(requestedChat);\r\n    }\r\n\r\n    const db = firebase.firestore();\r\n\r\n    const updateReceiverChats = (message, media, reactionMessage) => {\r\n\r\n        const receiversSnapshot = firebase.firestore().collection('users').doc(props.openedChat.id).collection('To').doc(props.user.uid).get();\r\n        return receiversSnapshot.then((snap) => {\r\n            let chats = snap.data();\r\n\r\n            let updatedReceiversChats = [...chats.messages, {\r\n                message: message,\r\n                dateTime: (new Date()).toISOString(),\r\n                sent: false,\r\n                received: true,\r\n                isSender: false,\r\n                reactionRequest: reactionMessage,\r\n                replyTo: requestedChat,\r\n                reactionReceived: false,\r\n                media: media\r\n            }];\r\n\r\n            const postMsg = db.collection('users').doc(props.openedChat.id).collection('To').doc(props.user.uid).set({ messages: updatedReceiversChats });\r\n            setRequestedChat(null);\r\n            return postMsg;\r\n        }).catch((e) => {\r\n            console.log(e.message);\r\n        });\r\n    }\r\n    const updateSendersChats = (updatedSendersChats) => {\r\n        const sendMsg = db.collection('users').doc(props.user.uid).collection('To').doc(props.openedChat.id).set({ messages: updatedSendersChats });\r\n        return sendMsg;\r\n    }\r\n\r\n\r\n\r\n    const sendMessage = (message, media = null, reactionMessage) => {\r\n        if (message || media) {\r\n            let messageTime = (new Date()).toISOString();\r\n\r\n            let updatedSendersChats = [...senderChats, {\r\n                message: message,\r\n                dateTime: messageTime,\r\n                sent: true,\r\n                received: false,\r\n                isSender: true,\r\n                replyTo: requestedChat,\r\n                reactionRequest: reactionMessage,\r\n                reactionReceived: false,\r\n                media: media\r\n            }];\r\n\r\n            console.log(updatedSendersChats);\r\n\r\n            updateSendersChats(updatedSendersChats).then(data => {\r\n                return setsenderChats(updatedSendersChats);\r\n            }).then(senderSucess => {\r\n                return updateReceiverChats(message, media, reactionMessage);\r\n            }).catch(e => {\r\n                console.log(e.message);\r\n            });\r\n            return true;\r\n        }\r\n    }\r\n\r\n    let messages = showLoader ? <Loader label='loading...' />:\r\n     senderChats.map(chat => {\r\n        if (chat.isSender === true) {\r\n            return <div key={chat.dateTime} className='Group-message outgoing'>\r\n                {chat.replyTo ?\r\n                    <div className='Group-message-replyTo-sender'>\r\n                        {chat.replyTo.message}\r\n                        <div className='Group-message-time'>{new Date(chat.replyTo.dateTime).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n                    </div>\r\n                    : ''}\r\n                {chat.message}\r\n                {chat.media ? <video className='Group-message-video' controls src={chat.media}></video> : ''}\r\n                <div className='Group-message-time'>{new Date(chat.dateTime).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n            </div>\r\n        } else {\r\n            return <div key={chat.dateTime} className='Group-message incoming'>\r\n                {\r\n                    chat.reactionRequest ?\r\n                        !chat.reactionReceived ?\r\n                            <div>\r\n                                Reaction Requested <br />\r\n                                <i className='Reaction-message-wrapper' onClick={() => recordReaction(chat)}>\r\n                                    Record\r\n                            </i>\r\n                                <i className='Reaction-message-wrapper' onClick={() => recordReaction(chat)}>\r\n                                    Stop\r\n                            </i>\r\n                            </div>\r\n                            : <>\r\n                                <div>\r\n                                    Reaction Requested <br />\r\n                                    <i className='Reaction-message-wrapper' onClick={() => recordReaction(chat)}>Record</i>\r\n                                    <i className='Reaction-message-wrapper' onClick={() => recordReaction(chat)}>Stop</i>\r\n                                    <br /><hr />\r\n                                </div>\r\n                                {chat.replyTo ? <div className='Group-message-replyTo-receiver'>\r\n                                    {chat.replyTo.message}\r\n                                    <div className='Group-message-time'>{new Date(chat.replyTo.dateTime).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n                                </div> : ''}\r\n\r\n                                {chat.message}\r\n                                {chat.media ? <video className='Group-message-video' controls src={chat.media}></video> : ''}\r\n                            </>\r\n                        : <>\r\n                            {chat.replyTo ? <div className='Group-message-replyTo-receiver'>\r\n                                {chat.replyTo.message}\r\n                                <div className='Group-message-time'>{new Date(chat.replyTo.dateTime).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n                            </div> : ''}\r\n                            {chat.message}\r\n                            {chat.media ? <video className='Group-message-video' controls src={chat.media}></video> : ''}\r\n                        </>\r\n                }\r\n                <div className='Group-message-time'>{new Date(chat.dateTime).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n            </div>\r\n        }\r\n    })\r\n\r\n    return <div className='GroupMessages-container'>\r\n        {\r\n            messages\r\n        }\r\n        <VideoMessage showHiddenMessage={showHiddenMessage} sendMessage={sendMessage} user={props.user} className='Group-message-video' recording={recordWebcam} />\r\n        <div ref={messagesEndRef} />\r\n        <SendMessage sendMessage={sendMessage} user={props.user} openedChat={props.openedChat} />\r\n\r\n\r\n\r\n        {/* <div className='Group-info-message'>created by 5454545</div>\r\n        <div className='Group-info-message'>created by 5454545</div>\r\n        <div className='Group-info-message'>created by 5454545</div>\r\n        <div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div>\r\n        <div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div><div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div><div className='Group-message incoming'>\r\n            created by 5454545asdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div>\r\n        <div className='Group-message outgoing'>\r\n            c\r\n            <div className='Group-message-time'>5.00PM</div>\r\n        </div> */}\r\n    </div >\r\n}\r\nexport default GroupMessages;","D:\\mypro\\whatsappclone\\src\\Firebase.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Menu\\Menu.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Registration\\Registration.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Authentication.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\Authentication\\Login\\Login.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\SendMessage\\SendMessage.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\GroupMessages\\VideoMessage\\VideoMessage.js",["86"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport RecordRTC from 'recordrtc';\r\nimport firebase from '../../../Firebase';\r\nimport { Spinner, SpinnerSize, ProgressIndicator } from 'office-ui-fabric-react';\r\nimport './VideoMessage.css';\r\n\r\nconst VideoMessage = (props) => {\r\n    const videoRef = useRef(null);\r\n    const [rtcStream, setRtcStream] = useState(null);\r\n    const [mediaStream, setMediaStream] = useState(null);\r\n    const [recordingStatus, setRecordingStatus] = useState('');\r\n    const [previewSrc, setPreviewSrc] = useState('');\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n    const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (props.recording) {\r\n            streamCamVideo();\r\n        } else {\r\n            stopVideo().then(sucess=>{\r\n                console.log('recording stoped');\r\n            });\r\n        }\r\n    }, [props.recording]);\r\n\r\n    const getFileBlob = (url, cb) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url);\r\n        xhr.responseType = \"blob\";\r\n        xhr.addEventListener('load', function () {\r\n            cb(xhr.response);\r\n        });\r\n        xhr.send();\r\n    };\r\n\r\n    const sendVideo = (media) => {\r\n        if (media) {\r\n            setShowSpinner(true);\r\n            let messageTime = (new Date()).toISOString();\r\n            let userStorageRef = firebase.storage().ref(props.user.uid + '/messages/' + messageTime);\r\n            getFileBlob(media, blob => {\r\n                let task = userStorageRef.put(blob);\r\n                task.on('state_changed',\r\n                    function progress(snapshot) {\r\n                        setUploadProgress(snapshot.bytesTransferred / snapshot.totalBytes);\r\n                    },\r\n                    function error(err) {\r\n                        console.log(err.message);\r\n                    },\r\n                    function complete() {\r\n                        setShowSpinner(null);\r\n                        firebase.storage().ref().child(props.user.uid + '/messages/' + messageTime).getDownloadURL().then(url=>{\r\n                            console.log(url);\r\n                            props.sendMessage('',url,false);\r\n                            setRecordingStatus('');\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    const stopVideo = () => {\r\n        let resolvePromise = new Promise((resolve,reject)=>{\r\n            if (rtcStream) {\r\n                rtcStream.stopRecording(() => {\r\n                    videoRef.current.src = videoRef.current.srcObject = null;\r\n                    videoRef.current.muted = false;\r\n                    videoRef.current.volume = 1;\r\n                    videoRef.current.src = URL.createObjectURL(rtcStream.getBlob()); //rtcStream.toURL();\r\n                    setPreviewSrc(URL.createObjectURL(rtcStream.getBlob()));\r\n                    rtcStream.destroy();\r\n                    setRtcStream(null);\r\n                    setRecordingStatus('previewing');\r\n                    resolve('recording stoped');\r\n                });\r\n            }else{\r\n                resolve('recording stoped');\r\n            }\r\n            if (mediaStream) {\r\n                const stream = mediaStream;\r\n                const tracks = stream.getTracks();\r\n                tracks.forEach(track => track.stop());\r\n            }\r\n        });\r\n        return resolvePromise;\r\n    }\r\n\r\n    const streamCamVideo = () => {\r\n        \r\n        setShowSpinner(false);\r\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;\r\n\r\n        let constraints = { audio: false, video: { width: 1280, height: 720 } };\r\n        navigator.mediaDevices\r\n            .getUserMedia(constraints)\r\n            .then(function (mediaStream) {\r\n                setMediaStream(mediaStream);\r\n\r\n                let localRtcStream = RecordRTC(mediaStream, { type: 'video' });\r\n                localRtcStream.startRecording();\r\n                setRtcStream(localRtcStream);\r\n\r\n                videoRef.current.srcObject = mediaStream;\r\n                videoRef.current.onloadedmetadata = function (e) {\r\n                    videoRef.current.play();\r\n                };\r\n                setRecordingStatus('recording');\r\n                props.showHiddenMessage();\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            }); // always check for errors at the end.\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='Group-message outgoing' hidden={recordingStatus !== '' ? false : true}>\r\n                <div className=\"Video-message-container\">\r\n                    {showSpinner === true ?\r\n                        <Spinner size={SpinnerSize.large} className='Video-message-spinner' /> : ''}\r\n                    <video muted={true} className='Video-message-camera' autoPlay={true} ref={videoRef} ></video>\r\n                </div>\r\n                <br />\r\n\r\n                {showSpinner === false ?\r\n                    <button onClick={() => { stopVideo().then(sucess=>{sendVideo(previewSrc)})} }>Send Message</button> : ''\r\n                }\r\n                {\r\n                    showSpinner ?\r\n                        <ProgressIndicator percentComplete={uploadProgress} /> : ''\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default VideoMessage;","D:\\mypro\\whatsappclone\\src\\Components\\Loader\\Loader.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\LeftSlider\\LeftSlider.js",[],"D:\\mypro\\whatsappclone\\src\\Components\\UserDetails\\UserDetails.js",["87"],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":18},{"ruleId":"96","severity":1,"message":"97","line":41,"column":24,"nodeType":"98","messageId":"99","endLine":41,"endColumn":26},{"ruleId":"100","severity":1,"message":"101","line":43,"column":8,"nodeType":"102","endLine":43,"endColumn":29,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":24,"column":8,"nodeType":"102","endLine":24,"endColumn":25,"suggestions":"105"},{"ruleId":"92","severity":1,"message":"106","line":7,"column":12,"nodeType":"94","messageId":"95","endLine":7,"endColumn":22},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'LeftSlider' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getSendersChats' and 'props.user.uid'. Either include them or remove the dependency array.","ArrayExpression",["109"],"React Hook useEffect has missing dependencies: 'stopVideo' and 'streamCamVideo'. Either include them or remove the dependency array.",["110"],"'profilePic' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [getSendersChats, props.openedChat.id, props.user.uid]",{"range":"115","text":"116"},"Update the dependencies array to be: [props.recording, stopVideo, streamCamVideo]",{"range":"117","text":"118"},[1612,1633],"[getSendersChats, props.openedChat.id, props.user.uid]",[913,930],"[props.recording, stopVideo, streamCamVideo]"]